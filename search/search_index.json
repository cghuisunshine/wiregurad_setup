{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"WireGuard Setup Guide for Beginners","text":""},{"location":"#introduction","title":"Introduction","text":"<p>WireGuard is a lightweight, high-performance VPN that uses modern cryptography to secure internet traffic. This guide walks beginners through setting up a WireGuard VPN server and connecting clients (e.g., laptops, phones).</p>"},{"location":"#disclaimer","title":"Disclaimer","text":"<p>You must have a Linux server (e.g., Ubuntu, Debian, Fedora, etc.) with root or sudo privileges. You also need a separate client device (such as Windows, macOS, iOS, Android, or another Linux machine) to connect to the VPN. If you do not have both a Linux server and a separate client device, this guide will not apply to your setup.</p>"},{"location":"#what-is-a-vpn","title":"What is a VPN?","text":"<p>A VPN (Virtual Private Network) encrypts your internet traffic and routes it through a secure tunnel. This hides your IP address and protects your data from potential eavesdroppers on insecure networks (such as public Wi-Fi). It can also let you securely access remote services or devices as if they were on your local network.</p> <p>WireGuard is a modern VPN protocol known for its simplicity, speed, and robust cryptography. Compared to older protocols like OpenVPN or IPSec, WireGuard is lighter, easier to configure, and often faster.</p>"},{"location":"#who-is-this-guide-for","title":"Who Is This Guide For?","text":"<ul> <li>Skill Level: This tutorial is aimed at beginners or those with basic Linux command-line experience.  </li> <li>Requirements:</li> <li>A Linux server with a public IP address (or proper port forwarding configured).</li> <li>A client device (Windows, macOS, iOS, Android, or Linux) to connect to the VPN.</li> <li>Familiarity with text editors (e.g., <code>nano</code>, <code>vim</code>) and basic command-line usage.</li> </ul>"},{"location":"#intended-use","title":"Intended Use","text":"<ul> <li>Securely access home/office networks remotely.  </li> <li>Encrypt public Wi-Fi traffic.  </li> <li>Connect multiple devices privately.</li> </ul>"},{"location":"#tasks-youll-perform","title":"Tasks You\u2019ll Perform","text":"<ol> <li>Install WireGuard on a server.  </li> <li>Configure the server and clients.  </li> <li>Start the VPN service.  </li> <li>Connect devices to the VPN.</li> </ol>"},{"location":"#intended-readers","title":"Intended Readers","text":"<ul> <li>Beginners with basic command-line experience.  </li> <li>Users seeking a privacy-focused VPN alternative.</li> </ul>"},{"location":"#conventions","title":"Conventions","text":"<ul> <li><code>Code blocks</code>: Commands to run in a terminal.  </li> <li>Bold terms: Key concepts or buttons.  </li> <li>Italics: File names or variables.</li> </ul>"},{"location":"#admonitions","title":"Admonitions","text":"<p>This guide uses success, warning, and note messages to provide additional information for instruction steps.</p> <p>Success</p> <p>Indicates successful outcomes. Displayed in a green box with a checkmark icon and \"Success.\"</p> <p>Warning</p> <p>Alerts about potential errors. Shown in an orange box with a warning icon and \"Warning.\"</p> <p>Danger</p> <p>Warns of actions causing data loss. Appears in a red box with a lightning icon and \"Danger.\"</p> <p>Tip</p> <p>Offers helpful advice or best practices. Displayed in a light green box with a flame icon and \"Tip.\"</p> <p>Info</p> <p>Shares general information or context. Displayed in a teal box with an info icon and \"Info.\"</p> <p>Note</p> <p>Provides additional details. Displayed in a blue box with a pen icon and \"Note.\"</p> <p>Example</p> <p>Provides practical examples or use cases. Displayed in a purple box with a test tube icon and \"Example.\"</p>"},{"location":"#next-step","title":"Next Step","text":"<p>You can now proceed to Getting Started.</p>"},{"location":"glossary/","title":"Glossary","text":"<ul> <li>VPN: Virtual Private Network (encrypts internet traffic).  </li> <li>Peer: A device connected to the VPN (server or client).  </li> <li>Endpoint: Public IP and port of the WireGuard server.  </li> <li>AllowedIPs: IP ranges routed through the VPN.  </li> <li>PersistentKeepalive: Prevents NAT timeout (default: 25 seconds).</li> </ul>"},{"location":"part1/","title":"Part 1: Getting Started","text":"<p>Before configuring a WireGuard VPN, you\u2019ll need:</p> <ol> <li>A Linux server (where you\u2019ll host WireGuard).  </li> <li>At least one client device (Windows, macOS, iOS, Android, or another Linux machine) to connect to that server.</li> </ol> <p>This part ensures you have WireGuard readily available on both the server and the client device(s). If you need detailed installation instructions, refer to the WireGuard Official Documentation or your OS\u2019s support resources.</p>"},{"location":"part1/#1-linux-server","title":"1. Linux Server","text":"<ul> <li>Confirm You Have WireGuard </li> <li>Check if WireGuard is in your distribution\u2019s repositories.  </li> <li>If you\u2019re not sure, consult your distro\u2019s documentation or the official WireGuard site.  </li> <li>Validate Tools </li> <li>After installation (or if already installed), ensure you can run <code>wg</code> or <code>wg-quick</code> in a terminal.</li> </ul> <p>No step-by-step install is provided here, but you must be able to install or verify that WireGuard is present on your server.</p>"},{"location":"part1/#2-windows-client","title":"2. Windows Client","text":"<ul> <li>Download the WireGuard Client </li> <li>Get the official Windows installer from WireGuard.com.  </li> <li>Open &amp; Verify </li> <li>After installing, launch the WireGuard program to ensure it starts without errors.  </li> <li>You may see a prompt to import or create a tunnel configuration\u2014wait until later parts of this guide.</li> </ul> <p>If you encounter any issues, check the WireGuard for Windows documentation or your system\u2019s help resources.</p>"},{"location":"part1/#3-macos-client","title":"3. macOS Client","text":"<ul> <li>Obtain WireGuard from the Mac App Store </li> <li>Search \u201cWireGuard\u201d in the App Store (or use this link) and click Get.  </li> <li>Launch &amp; Confirm </li> <li>After installation, open the WireGuard app.  </li> <li>It should show an initial empty list of tunnels.</li> </ul> <p>Again, detailed steps (like Apple ID logins) are outside this guide\u2019s scope. Refer to Apple Support if needed.</p>"},{"location":"part1/#4-ios-android-clients","title":"4. iOS &amp; Android Clients","text":"<ul> <li>Install WireGuard Mobile </li> <li>iOS: Find \u201cWireGuard\u201d in the iOS App Store.  </li> <li>Android: Find \u201cWireGuard\u201d in Google Play.  </li> <li>Launch the App </li> <li>Ensure the app runs and can create or import a tunnel later.</li> </ul> <p>For troubleshooting or permissions issues, see WireGuard on iOS/Android or your phone\u2019s support documentation.</p>"},{"location":"part1/#5-next-steps","title":"5. Next Steps","text":"<p>With WireGuard available on: - Linux server (ready to act as the VPN host), and - Client devices (ready to connect),</p> <p>you can now proceed to Configuring the Server, where you\u2019ll set up the server\u2019s WireGuard configuration (keys, interface settings, and firewall rules). Later, in Configuring Clients, you\u2019ll create and import client configurations to connect securely to the server.</p> <p>Note: If you still need to install WireGuard on any platform, please consult the official installation instructions or your OS\u2019s package manager documentation before proceeding.</p>"},{"location":"part2/","title":"Part 2: Configuring the Server","text":"<p>When you open WireGuard (on your server or client) for the first time, you\u2019ll likely see an empty interface or a blank list of \u201cTunnels.\u201d That\u2019s normal\u2014you need to create your own configuration to tell WireGuard how to handle the VPN. Below are step-by-step instructions to configure your Linux server as a WireGuard VPN host.</p>"},{"location":"part2/#why-these-steps-matter","title":"Why These Steps Matter","text":"<ol> <li> <p>Enable IP Forwarding    Allows your server to pass traffic between the VPN and other networks (like the internet).</p> </li> <li> <p>Generate Server Keys    WireGuard relies on a public\u2013private key pair. Your server has one; each client has its own.</p> </li> <li> <p>Edit <code>wg0.conf</code>    This is the main WireGuard configuration file where you set the VPN interface\u2019s IP, port, and any connected clients (peers).</p> </li> <li> <p>Add Peer Public Keys    Tells the server which clients can connect by identifying them via their unique public keys.</p> </li> <li> <p>Open/Forward Firewall Ports    Ensures your server can receive VPN traffic on UDP port 51820.</p> </li> <li> <p>Activate the Interface    Brings the VPN \u201conline,\u201d making your server listen for client connections.</p> </li> </ol>"},{"location":"part2/#1-enable-ip-forwarding","title":"1. Enable IP Forwarding","text":"<ol> <li>Open <code>/etc/sysctl.conf</code>:    <pre><code>sudo nano /etc/sysctl.conf\n</code></pre></li> <li>Find or add this line (make sure it\u2019s not commented out):    <pre><code>net.ipv4.ip_forward=1\n</code></pre></li> <li>Save and exit (in nano, Ctrl+O then Enter, then Ctrl+X).</li> <li>Apply changes immediately:    <pre><code>sudo sysctl -p\n</code></pre></li> <li>Confirm it worked:    <pre><code>sysctl net.ipv4.ip_forward\n</code></pre>    You should see: <pre><code>net.ipv4.ip_forward = 1\n</code></pre> </li> </ol> <p>Success</p> <p>Now IP Forwarding is enabled.</p> <p>Why? Without IP forwarding, your VPN server can\u2019t relay traffic from connected clients to other networks.</p>"},{"location":"part2/#2-create-a-secure-directory-for-keys","title":"2. Create a Secure Directory for Keys","text":"<pre><code>sudo mkdir -p /etc/wireguard/keys\nsudo chmod 700 /etc/wireguard/keys\n</code></pre> <p>Why? This ensures your private key is protected. <code>chmod 700</code> means only the root user can read or write in that directory.</p>"},{"location":"part2/#3-generate-the-servers-key-pair","title":"3. Generate the Server\u2019s Key Pair","text":"<ol> <li>Navigate to the keys folder and set a strict umask:    <pre><code>cd /etc/wireguard/keys\numask 077\n</code></pre></li> <li>Generate the private and public keys:    <pre><code>wg genkey | tee server-private.key | wg pubkey &gt; server-public.key\n</code></pre> </li> </ol> <p>Example</p> <p>This is an example for key generation process.</p> <p>Why? <code>wg0.conf</code> tells WireGuard how to configure the VPN interface (<code>wg0</code>). The <code>[Interface]</code> section is for the server; each <code>[Peer]</code> section defines a client.</p>"},{"location":"part2/#5-why-add-a-peers-public-key","title":"5. Why Add a Peer\u2019s Public Key?","text":"<p>You\u2019ll eventually create a key pair for each client. In <code>[Peer]</code> sections, you include the client\u2019s public key so the server:</p> <ul> <li>Recognizes the client\u2019s packets.  </li> <li>Encrypts data so only that client can read it.</li> </ul> <p>We\u2019ll cover this in Part 3, where you generate client keys and add those <code>[Peer]</code> entries to this file.</p>"},{"location":"part2/#6-open-the-firewall-port-51820udp","title":"6. Open the Firewall Port (51820/UDP)","text":"<ul> <li>Ubuntu with UFW:   <pre><code>sudo ufw allow 51820/udp\nsudo ufw status\n</code></pre></li> <li>CentOS/RHEL with firewalld:   <pre><code>sudo firewall-cmd --add-port=51820/udp --permanent\nsudo firewall-cmd --reload\n</code></pre></li> <li>Other Environments:</li> <li>Check your router or cloud provider\u2019s firewall settings.</li> <li>Forward or allow UDP on port 51820 to this server.</li> </ul> <p>Why? Without opening the firewall, client traffic on port 51820 can\u2019t reach your server.</p>"},{"location":"part2/#7-start-the-vpn-interface","title":"7. Start the VPN Interface","text":"<p><pre><code>sudo wg-quick up wg0\n</code></pre> Check status: <pre><code>sudo wg\n</code></pre> You should see something like: <pre><code>interface: wg0\n  public key: ...\n  private key: (hidden)\n  listening port: 51820\n</code></pre> </p> <p>Warning</p> <p>A private key should never be made publicly available.</p> <p>Why? <code>wg-quick</code> applies the configuration file (<code>wg0.conf</code>) to create the <code>wg0</code> network interface.</p>"},{"location":"part2/#8-enable-wireguard-on-boot-optional","title":"8. Enable WireGuard on Boot (Optional)","text":"<p>If you want the VPN to start automatically whenever the server reboots:</p> <pre><code>sudo systemctl enable wg-quick@wg0\n</code></pre> <p>Why? No need to manually bring <code>wg0</code> up after every restart.</p>"},{"location":"part2/#9-validate-everything","title":"9. Validate Everything","text":"<ol> <li>Confirm IP Forwarding:    <pre><code>sysctl net.ipv4.ip_forward\n</code></pre>    Should be <code>1</code>.</li> <li>Ping the VPN Interface:    <pre><code>ping -c 3 10.8.0.1\n</code></pre>    You\u2019ll see replies from the server\u2019s own VPN IP (<code>10.8.0.1</code>).    </li> </ol> <p>Example</p> <p>Above screenshot shows an example of succeessful replies from the server's own VPN IP.</p> <p>No clients are connected yet, but this ensures your server\u2019s VPN interface is up and running.</p>"},{"location":"part2/#whats-next","title":"What\u2019s Next?","text":"<ul> <li>Generate client keys and add their public keys to the server\u2019s <code>[Peer]</code> sections. </li> <li>Part 3 will show you how to configure and connect your clients (e.g., Windows, macOS, mobile). </li> <li>Once a client is configured, you\u2019ll see it listed under <code>sudo wg</code> with a <code>latest handshake</code> timestamp when it\u2019s connected.</li> </ul>"},{"location":"part2/#final-tips","title":"Final Tips","text":"<ul> <li>Keep <code>server-private.key</code> secret; only share the public key.  </li> <li>Use careful firewall rules to avoid locking yourself out.  </li> <li>Check logs if something isn\u2019t working: <code>sudo journalctl -u wg-quick@wg0</code> on many distributions.</li> </ul> <p>Now you\u2019re all set to move on to Configuring Clients and set up your clients so they can connect to your newly configured VPN server!</p>"},{"location":"part3/","title":"Part 3: Configuring Clients","text":"<p>When you look at the WireGuard interface on a fresh install, you\u2019ll often see an empty \u201cTunnels\u201d list or a simple log window. This guide shows you how to create a client configuration so you can connect to your WireGuard server.</p> <p>Below are 13 steps that explain what you\u2019re doing and why each step is necessary. We\u2019ll also cover how to export or \u201cdownload\u201d the client configuration (<code>.conf</code> file) so you can use it on Windows, macOS, Linux, iOS, or Android.</p>"},{"location":"part3/#step-1-plan-your-client-ip-addresses","title":"Step 1: Plan Your Client IP Addresses","text":"<pre><code>Pick a private IP range for your WireGuard network, e.g., 10.8.0.0/24.\nServer\u2019s IP might be 10.8.0.1/24.\nClients get 10.8.0.2/24, 10.8.0.3/24, etc.\n</code></pre>"},{"location":"part3/#why-this-step","title":"Why This Step?","text":"<p>Each client needs a unique IP in the same subnet as the server\u2019s VPN interface. For example, if the server is <code>10.8.0.1/24</code>, the first client can be <code>10.8.0.2/24</code>, the second can be <code>10.8.0.3/24</code>, etc.</p>"},{"location":"part3/#step-2-generate-the-client-key-pair","title":"Step 2: Generate the Client Key Pair","text":"<p>On your Linux server (or wherever you keep keys):</p> <pre><code>sudo mkdir -p /etc/wireguard/keys/clients\nsudo chmod 700 /etc/wireguard/keys/clients\ncd /etc/wireguard/keys/clients\n\numask 077\nwg genkey | tee client1-private.key | wg pubkey &gt; client1-public.key\n</code></pre>"},{"location":"part3/#why-this-step_1","title":"Why This Step?","text":"<p>WireGuard uses a public\u2013private key pair. The private key stays on the client. The public key is added to the server\u2019s configuration so the server recognizes and trusts this client.</p>"},{"location":"part3/#step-3-add-the-clients-public-key-to-the-server","title":"Step 3: Add the Client\u2019s Public Key to the Server","text":"<p>Open your server configuration file, e.g. <code>/etc/wireguard/wg0.conf</code>, and append a new <code>[Peer]</code> section:</p> <pre><code>[Peer]\n# Client 1\nPublicKey = &lt;contents-of-client1-public.key&gt;\nAllowedIPs = 10.8.0.2/32\n</code></pre> <p>Then restart or update your WireGuard interface:</p> <p><pre><code>sudo wg-quick down wg0 &amp;&amp; sudo wg-quick up wg0\n</code></pre> (Or run <code>sudo wg set wg0 peer &lt;client1-public-key&gt; allowed-ips 10.8.0.2/32</code> for a live update.)</p>"},{"location":"part3/#why-this-step_2","title":"Why This Step?","text":"<p>The server needs to know which public key belongs to which client, and what IP to assign them (<code>10.8.0.2/32</code>). If you don\u2019t add a <code>[Peer]</code> entry for the client, the server won\u2019t accept its connections.</p>"},{"location":"part3/#step-4-create-the-client-configuration-file","title":"Step 4: Create the Client Configuration File","text":"<p>Create a <code>client1.conf</code> (or any name you like) on your server or local machine:</p> <p><pre><code>[Interface]\n# Client's VPN IP\nAddress = 10.8.0.2/24\n\n# Client's private key (from client1-private.key)\nPrivateKey = &lt;contents-of-client1-private.key&gt;\n\n# (Optional) DNS server to use\nDNS = 1.1.1.1\n\n[Peer]\n# Server's public key\nPublicKey = &lt;contents-of-server-public.key&gt;\n\n# Server's IP or domain, plus port\nEndpoint = &lt;server-ip-or-domain&gt;:51820\n\n# Route all traffic through VPN\nAllowedIPs = 0.0.0.0/0\n\n# Keeps NAT mappings alive\nPersistentKeepalive = 25\n</code></pre> </p> <p>Example</p> <p>Above screenshot shows an example of client configuration file.</p>"},{"location":"part3/#why-this-step_3","title":"Why This Step?","text":"<p>Each client needs its own <code>.conf</code> file specifying: - Its own IP address (<code>Address</code>). - Its private key (<code>PrivateKey</code>). - Where to connect (<code>Endpoint</code>) and which server key to trust (<code>PublicKey</code>).</p>"},{"location":"part3/#step-5-understand-how-to-pick-the-right-ip","title":"Step 5: Understand How to Pick the Right IP","text":"<p>If your server is at <code>10.8.0.1/24</code>, then: - First client: <code>Address = 10.8.0.2/24</code> - Second client: <code>Address = 10.8.0.3/24</code> - Third client: <code>Address = 10.8.0.4/24</code></p> <p>Just make sure each client has a different IP in that range.</p>"},{"location":"part3/#why-this-step_4","title":"Why This Step?","text":"<p>No two clients can share the same IP address. You\u2019re essentially building a small virtual LAN (10.8.0.x).</p>"},{"location":"part3/#step-6-export-download-the-client-config-file","title":"Step 6: Export (Download) the Client Config File","text":"<p>If you created <code>client1.conf</code> on the server, you need to get it onto the client machine (Windows, macOS, etc.):</p> <ol> <li>SCP (Linux/Mac):    <pre><code>scp username@yourserver.com:/etc/wireguard/keys/clients/client1.conf .\n</code></pre> </li> </ol> <p>Example</p> <p>The screenshot above demonstrates how to download the client configuration file using SCP.</p> <ol> <li>SFTP (Windows or Linux):</li> <li>Open an SFTP client (like WinSCP, FileZilla).</li> <li>Connect to your server.</li> <li>Navigate to <code>/etc/wireguard/keys/clients/</code>.</li> <li>Download <code>client1.conf</code> to your local machine.</li> <li>Email or Cloud Transfer:</li> <li>(Less secure) You could email yourself <code>client1.conf</code> or use a cloud drive\u2014be mindful of security.</li> </ol>"},{"location":"part3/#why-this-step_5","title":"Why This Step?","text":"<p>Your client device needs a local copy of <code>client1.conf</code> so it can import or load the config.</p>"},{"location":"part3/#step-7-import-on-windows","title":"Step 7: Import on Windows","text":"<ol> <li>Launch WireGuard on Windows.</li> <li>Click Import Tunnel(s) (or <code>Add Tunnel &gt; Import from file</code>).</li> <li>Browse to <code>client1.conf</code> and click Open.</li> <li>You should see a new tunnel in the list, typically named after the file.</li> </ol>"},{"location":"part3/#why-this-step_6","title":"Why This Step?","text":"<p>Windows WireGuard expects a <code>.conf</code> file. Once imported, you can toggle the tunnel \u201con\u201d to connect.</p>"},{"location":"part3/#step-8-import-on-macos","title":"Step 8: Import on macOS","text":"<ol> <li>Open WireGuard from your Applications folder.</li> <li>Click the + button or \u201cImport tunnel(s) from file.\u201d</li> <li>Select <code>client1.conf</code>.</li> <li>A new tunnel appears in the list\u2014toggle it to Activate.</li> </ol>"},{"location":"part3/#why-this-step_7","title":"Why This Step?","text":"<p>macOS works similarly to Windows: you import the config file to create a new WireGuard tunnel.</p>"},{"location":"part3/#step-9-import-on-linux-client","title":"Step 9: Import on Linux (Client)","text":"<p>If you\u2019re using Linux as a client:</p> <pre><code># Place the config in /etc/wireguard/ (optional location)\nsudo cp client1.conf /etc/wireguard/\n\n# Bring up the tunnel\nsudo wg-quick up /etc/wireguard/client1.conf\n</code></pre> <p>Check with: <pre><code>ip addr show wg-client1\n# or\nsudo wg\n</code></pre></p>"},{"location":"part3/#why-this-step_8","title":"Why This Step?","text":"<p>Linux uses <code>wg-quick</code> to bring the VPN interface up or down. You can store <code>.conf</code> files in <code>/etc/wireguard/</code> for consistency.</p>"},{"location":"part3/#step-10-optional-generate-a-qr-code-for-mobile","title":"Step 10: Optional \u2013 Generate a QR Code for Mobile","text":"<p>If you have iOS or Android:</p> <pre><code>sudo apt-get install qrencode\ncd /etc/wireguard/keys/clients\nqrencode -t ansiutf8 &lt; client1.conf\n</code></pre> <p></p> <p>Example</p> <p>The above screenshot shows a successful an example QR code generation process.</p> <p>Then in the WireGuard mobile app: 1. Tap Add. 2. Choose Scan from QR Code. 3. Point your camera at the terminal output.</p>"},{"location":"part3/#why-this-step_9","title":"Why This Step?","text":"<p>Scanning a QR code is often easier than manually transferring a <code>.conf</code> file to your phone.</p>"},{"location":"part3/#step-11-start-activate-the-tunnel","title":"Step 11: Start (Activate) the Tunnel","text":"<ul> <li>Windows/macOS: Toggle the tunnel to ON or Activate.</li> <li>Linux: <code>sudo wg-quick up /etc/wireguard/client1.conf</code></li> <li>iOS/Android: Tap the \u201cActivate\u201d or \u201cConnect\u201d slider. </li> </ul> <p>Tip</p> <p>The above screenshot is from macOS; other types of devices offer similar operations to activate the tunnel.</p>"},{"location":"part3/#why-this-step_10","title":"Why This Step?","text":"<p>This is how you actually connect the client to the server via the WireGuard VPN.</p>"},{"location":"part3/#step-12-verify-connectivity","title":"Step 12: Verify Connectivity","text":"<ol> <li>Ping the Server:    <pre><code>ping 10.8.0.1 -c 3\n</code></pre></li> <li>Check IP (if routing all traffic):</li> <li>Visit an IP-checker site. It should show your server\u2019s public IP if the tunnel is up.</li> <li>View \u201clatest handshake\u201d on the server:    <pre><code>sudo wg\n</code></pre>    You should see something like:    <pre><code>peer: &lt;client1-public-key&gt;\n  endpoint: &lt;client's IP&gt;:&lt;port&gt;\n  latest handshake: &lt;recent timestamp&gt;\n</code></pre> </li> </ol> <p>Example</p> <p>The above screenshot shows a successful connection to the server through the tunnel.</p>"},{"location":"part3/#why-this-step_11","title":"Why This Step?","text":"<p>Ensures your client can reach the server (<code>10.8.0.1</code>), and that traffic is flowing through the VPN.</p>"},{"location":"part3/#step-13-check-logs-or-update-on-the-fly-optional","title":"Step 13: Check Logs or Update On-The-Fly (Optional)","text":"<ul> <li>View logs:   <pre><code>sudo journalctl -u wg-quick@wg0\n</code></pre>   (Adjust if your system uses a different service name.)</li> <li>Update peer config without restarting:   <pre><code>sudo wg set wg0 peer &lt;client1-public-key&gt; allowed-ips 10.8.0.2/32\n</code></pre></li> <li>Disconnect the client:   <pre><code>sudo wg-quick down /etc/wireguard/client1.conf\n</code></pre></li> </ul>"},{"location":"part3/#why-this-step_12","title":"Why This Step?","text":"<ul> <li>Logs help troubleshoot connection issues.  </li> <li>On-the-fly updates let you add or remove peers without fully restarting the VPN.  </li> <li>Disconnect safely closes the tunnel on the client side.</li> </ul>"},{"location":"part3/#conclusion","title":"Conclusion","text":"<p>By following these 13 steps, you\u2019ve:</p> <ol> <li>Decided which IP address each client will use.  </li> <li>Generated a unique key pair for every client.  </li> <li>Added each client\u2019s public key to the server config.  </li> <li>Created and exported a <code>.conf</code> file for easy import on the client device.  </li> <li>Activated the tunnel on your client.  </li> <li>Verified everything is working.</li> </ol> <p>Next: You can add more clients simply by repeating these steps (using a different <code>.conf</code> for each one). If everything\u2019s working, you now have a fully functional WireGuard VPN setup! Now you can move to Starting the VPN &amp; Connecting.</p>"},{"location":"part4/","title":"Part 4: Starting the VPN &amp; Connecting","text":"<p>In this final part, we\u2019ll combine everything from the previous steps so you can see your WireGuard VPN in action. We\u2019ll explain what each step does, why it matters, and how to verify it\u2019s working. If you\u2019re new to this and find yourself unsure, don\u2019t worry\u2014this guide aims to spell it out in simple terms.</p>"},{"location":"part4/#what-youll-accomplish","title":"What You\u2019ll Accomplish","text":"<ol> <li>Start the VPN on your server, so it\u2019s ready for incoming connections.  </li> <li>Generate or confirm you have client configuration files (e.g., <code>.conf</code>) or QR codes for mobile.  </li> <li>Import these files into WireGuard on any device (Windows, macOS, iOS, Android, or Linux).  </li> <li>Verify that your VPN connection is actually working (ping, logs, and IP checks).  </li> </ol> <p>By the end, you\u2019ll have a fully operational WireGuard VPN, allowing you or your users to securely access remote networks.</p>"},{"location":"part4/#1-confirm-server-side-configuration","title":"1. Confirm Server-Side Configuration","text":"<p>Before starting the VPN, let\u2019s ensure everything on the server is in place. In Part 3, you generated client keys and added <code>[Peer]</code> entries to your server\u2019s config file. Double-check:</p> <ol> <li>Open <code>/etc/wireguard/wg0.conf</code> on your server:    <pre><code>sudo nano /etc/wireguard/wg0.conf\n</code></pre></li> <li>Inside <code>[Interface]</code>:</li> <li><code>PrivateKey = &lt;server-private-key&gt;</code> (should be the actual key, not <code>&lt;...&gt;</code>).  </li> <li><code>Address = 10.8.0.1/24</code> (or any other chosen subnet for your VPN).  </li> <li><code>ListenPort = 51820</code> (or the port you chose).</li> <li>Make sure each <code>[Peer]</code> block has:</li> <li><code>PublicKey = &lt;client-public-key&gt;</code> (copied from the client\u2019s <code>.pub</code> file).  </li> <li><code>AllowedIPs = 10.8.0.X/32</code> (the IP you assigned to that client).</li> </ol> <p>Why This Matters: The server must know which clients can connect (their public key) and which internal IP (<code>10.8.0.X</code>) to assign each one. If you skip this, your clients won\u2019t be recognized.</p>"},{"location":"part4/#2-bring-up-the-vpn-interface-on-the-server","title":"2. Bring Up the VPN Interface on the Server","text":"<p><pre><code>sudo wg-quick up wg0\n</code></pre> Why: This command loads your <code>wg0.conf</code> file and creates the <code>wg0</code> interface. It\u2019s like \u201cswitching on\u201d the VPN server.</p> <ul> <li>If you see an error (e.g., \u201cRTNETLINK answers: File exists\u201d), check your config or ensure <code>wg0</code> isn\u2019t already active by running <code>sudo wg-quick down wg0</code> first.</li> <li>If everything\u2019s good, you won\u2019t see much output, but you can verify:</li> </ul> <p><pre><code>sudo wg\n</code></pre>   This shows info about the <code>wg0</code> interface, including the server\u2019s public key, listening port, and any peers.</p>"},{"location":"part4/#3-enable-wireguard-at-boot-optional","title":"3. Enable WireGuard at Boot (Optional)","text":"<p><pre><code>sudo systemctl enable wg-quick@wg0\n</code></pre> Why: You probably want your VPN to auto-start after each server reboot. This systemd command ensures WireGuard is brought up every time your server restarts.</p>"},{"location":"part4/#4-generate-or-confirm-your-client-configuration-files","title":"4. Generate or Confirm Your Client Configuration Files","text":"<p>If you haven\u2019t already (or need a refresher):</p> <ul> <li> <p>Client <code>.conf</code> File Example:   <pre><code>[Interface]\nAddress = 10.8.0.2/24\nPrivateKey = &lt;client-private-key&gt;\nDNS = 1.1.1.1\n\n[Peer]\nPublicKey = &lt;server-public-key&gt;\nEndpoint = &lt;server-ip-or-domain&gt;:51820\nAllowedIPs = 0.0.0.0/0\nPersistentKeepalive = 25\n</code></pre></p> </li> <li> <p>Why: This <code>.conf</code> file tells the client:</p> </li> <li>Its IP inside the VPN (<code>10.8.0.2</code>).</li> <li>Its private key (used to authenticate &amp; encrypt traffic).</li> <li>The server\u2019s address &amp; public key.</li> </ul> <p>If you need a QR code for mobile devices, install <code>qrencode</code> on the server and run: <pre><code>qrencode -t ansiutf8 &lt; client1.conf\n</code></pre> Then scan with the WireGuard app on iOS/Android.</p> <p>Why: QR codes make it easier to add a tunnel on phones without fiddling with <code>.conf</code> files.</p>"},{"location":"part4/#5-transfer-the-client-configuration-file-if-needed","title":"5. Transfer the Client Configuration File (If Needed)","text":"<p>If you created the client <code>.conf</code> file on the server, you\u2019ll need to download it to your local device (Windows, macOS, or another Linux machine):</p> <ul> <li>SCP/SFTP (Linux/Mac):   <pre><code>scp user@yourserver.com:/etc/wireguard/keys/clients/client1.conf .\n</code></pre></li> <li>File Transfer App (Windows):</li> <li>Use WinSCP or FileZilla to connect to your server and download <code>client1.conf</code>.</li> </ul> <p>Why: The <code>.conf</code> file must physically reside on the client device to be imported into the WireGuard app.</p>"},{"location":"part4/#6-import-on-windowsmacos","title":"6. Import on Windows/macOS","text":"<ol> <li>Open the WireGuard app:</li> <li>Windows: search for \u201cWireGuard\u201d in the Start menu.</li> <li>macOS: open \u201cWireGuard\u201d from Applications.</li> <li>Click \u201cImport Tunnel(s)\u201d (or the <code>+</code> icon).</li> <li>Select your <code>.conf</code> file. The app should show a new tunnel entry.</li> <li>Activate the tunnel by flipping the switch to \u201cOn\u201d or \u201cConnect.\u201d</li> </ol> <p>Why: Without importing the <code>.conf</code>, the WireGuard app has no idea how to connect to your server.</p>"},{"location":"part4/#7-importscan-on-iosandroid","title":"7. Import/Scan on iOS/Android","text":"<ol> <li>Install WireGuard from the App Store or Google Play.</li> <li>Open the app and tap \u201c+\u201d \u2192 \u201cCreate from file or archive\u201d (or \u201cScan from QR Code\u201d).</li> <li>If using a <code>.conf</code> file, transfer it to your phone (via AirDrop, email, or cloud).  </li> <li>Tap \u201cImport\u201d and select the file.</li> <li>Or, scan the QR code if you generated one.</li> <li>Activate the tunnel by toggling it on.</li> </ol> <p>Why: Mobile devices need the same tunnel details: server IP, server public key, client private key, etc.</p>"},{"location":"part4/#8-verify-the-connectionon-linux","title":"8. Verify the Connection(on Linux)","text":"<p>Once your client tunnel is active:</p> <ol> <li>Ping the Server\u2019s VPN IP:    <pre><code>ping 10.8.0.1\n</code></pre></li> <li>If it replies, you have basic connectivity.</li> <li>Check \u201clatest handshake\u201d on the server:    <pre><code>sudo wg\n</code></pre></li> <li>You should see a \u201clatest handshake\u201d timestamp under the client\u2019s <code>peer:</code> section, indicating an active session.</li> <li>Confirm Your Public IP (if routing all traffic through VPN):</li> <li>Visit a \u201cWhat\u2019s my IP\u201d website. You should see your server\u2019s public IP address instead of your local ISP\u2019s.</li> </ol> <p>Why: These steps ensure data is flowing through the VPN, not just showing \u201cconnected\u201d in the app without actual traffic.</p>"},{"location":"part4/#9-troubleshoot-if-needed","title":"9. Troubleshoot (If Needed)","text":"<ul> <li>Server Logs:   <pre><code>sudo journalctl -u wg-quick@wg0\n</code></pre>   Look for errors like \u201cKey is not the correct length\u201d or \u201cHandshake did not complete.\u201d</li> <li>Client Logs:  </li> <li>On Windows/macOS: In the WireGuard app, click the Log tab.  </li> <li>On iOS/Android: Tap the tunnel, then look for \u201cLog\u201d or \u201cInfo.\u201d</li> <li>Double-Check Firewall:  </li> <li>Did you open UDP port <code>51820</code> on your server?  </li> <li>If behind a home router, did you forward that port?</li> </ul>"},{"location":"part4/#10-know-its-working","title":"10. Know It\u2019s Working","text":"<p>When successful, you\u2019ll see: 1. A stable \u201cConnected\u201d status in the WireGuard client app. 2. Ping responses from <code>10.8.0.1</code>. 3. A recent \u201clatest handshake\u201d time in <code>sudo wg</code> on the server. 4. Potentially a new public IP (that of your server) if you route all traffic via the VPN.</p> <p>Why: This is the moment you confirm your secure tunnel is established and data is encrypted in transit.</p>"},{"location":"part4/#conclusion","title":"Conclusion","text":"<p>By following these steps:</p> <ol> <li>Your server is running the <code>wg0</code> interface and listening on port <code>51820</code>.  </li> <li>Clients have valid <code>.conf</code> files (or QR codes) and can connect to your server\u2019s VPN IP (<code>10.8.0.1</code>).  </li> <li>Connectivity tests (ping, logs, IP checks) confirm the tunnel is fully operational.</li> </ol> <p>You now have a functional WireGuard VPN! If you run into issues, review logs, verify your server\u2019s firewall, and ensure each client\u2019s config matches exactly. Happy secure networking!</p>"},{"location":"troubleshooting/","title":"Troubleshooting Guide","text":"Issue Solution Connection fails Open UDP port <code>51820</code> on the server firewall. No internet access Enable IP forwarding: <code>sysctl -p</code>. Key mismatch Regenerate and replace keys. QR code won\u2019t scan Ensure <code>client.conf</code> has no typos. Slow speeds Check server bandwidth or ISP throttling."}]}